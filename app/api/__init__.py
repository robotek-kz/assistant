"""
Добр пожаловать в документацию Assistant API!

Этот проект написан на Python, с помощью [Flask](https://flask.palletsprojects.com/) веб-фреймворк. 
Эта документация переведена и генерируется автоматически с помощью
расширение [APIFairy] (https://github.com/miguelgrinberg/apifairy) Flask.

## Введение

Assistant-API — это простой в использовании веб-API. 
Основая задача, это быстрое создание API на основе используемых библиотек.

Assistant API предоставляет следующие функции

- Регистрация пользователя, вход и выход
- Создание и удаление Application, Episode, Lines.
- Личный кабинет с игровым режимом.

## Конфигурация

При использовании и разработке Assistant API, есть ряд переменных окружения, которые можно настроить.
 Переменные могут быть определены непосредственно в среде или в
`.env` в каталоге проекта. В следующей таблице перечислены все
переменные среды, которые используются в настоящее время:

| Переменные приложения | Станд. | Описание |
| - | - | - |
| `SECRET_KEY` | `top-secret!` | Секретный ключ, в виде строки. |
| `DATABASE_URL`  | `sqlite:///db.sqlite` | Путь до базы данных, ссылка [SQLAlchemy](https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls) framework. |
| `SQL_ECHO` | not defined | Отображение в консоли |
| `DISABLE_AUTH` | not defined | Отключение аутентификации |
| `ACCESS_TOKEN_MINUTES` | `15` | Время для доступности токена. |
| `REFRESH_TOKEN_DAYS` | `7` | Обновление токена через определенное количество дней. |
| `REFRESH_TOKEN_IN_COOKIE` | `yes` | Возвращать токен обновления в файлке cookie. |
| `REFRESH_TOKEN_IN_BODY' | `no` | Возвращать токен обновления в body HTTP. |
| `RESET_TOKEN_MINUTES` | `15` | Время действия для токена сброса. |
| `PASSWORD_RESET_URL` | `http://localhost:3000/reset` | URL адрес сброса пароля. |
| `USE_CORS` | `yes` | Разрешить запросы из разных источников.  |
| `DOCS_UI` | `elements` | UI для документации. Можно поменять на `swagger_ui`, `redoc`, `rapidoc` или `elements`. |


## Аутентификация

Аутентификация использует токена доступа и обновления для доступа к API.

Чтобы получить токен доступа и обновления, пользователь должен отправить `POST`
запрос к конечной точке `/api/tokens`, передавая имя пользователя и пароль
пользователь в заголовке «Authorization» в соответствии с базовой аутентификацией HTTP. 
Ответ включает в себя маркеры доступа и обновления в теле. Для
добавлена безопасность в одностраничных приложениях, также возвращается токен обновления
в файле cookie.

Большинство конечных точек в этом API аутентифицируются с помощью токена доступа, передаваемого
в заголовке «Authorization», используя схему «Bearer».

Токены доступа действительны в течение 15 минут (по умолчанию) с момента их создания. 
Когда срок действия токена истек, пользователь может обновить его, используя обновления токена. 
Для этого клиент должен отправить запрос `PUT` к конечной точке `/api/tokens`, передавая токен доступа с истекшим сроком действия в теле
запроса и токен обновления либо в теле, либо через файл cookie
отправлено, когда токены были запрошены. Ответ на этот запрос будет включать
новая пара токенов. У токена обновления срок действия по умолчанию 7 дней,
и используется только для обновления токена доступа, с которым они были возвращены. При
использовании токена обновления более одного раза будет расцениваться возможной атакой,
и приведет к немедленному отзыву всех существующих токенов для пользователя.

Все неудачные аутентификации обрабатываются кодом состояния «401».


## Пагинация

Пагинация используется внутри функций запросов. Существует в виде отдельного файла `decorators.py`.
Задача пагинации обработать полученный запрос и вернуть в виде ассоцированного массива.

Можно ограничить количество записей с помощью `limit`:

    http://localhost:5000/api/users?limit=10

Можно ограничить количество записей с помощью `offset` начиная с первого индекса:

    http://localhost:5000/api/users?limit=10&offset=10

Следующие примеры:

    http://localhost:5000/api/episodes?limit=10&after=2021-01-01T00:00:00
    http://localhost:5000/api/users/me/followers?limit=10&after=diana


## Ошибки

Все ошибки, возвращаемые этим API, используют следующую структуру JSON:

```json
{
    "code": <Номер ошибки>,
    "message": <Короткое описание>,
    "description": <Длинное описание>,
}
```

В случае ошибок проверки схемы также возвращается поле `errors`,
содержащий подробный список ошибок проверки, обнаруженных в отправленном запросе:

```json
{
    "code": <Номер ошибки>,
    "message": <Короткое описание>,
    "description": <Длинное описание>,
    "errors": [ <Детали ошибок>, ... ]
}
```


## Приложения

Дополняется...
```
"""  # noqa: E501

from api.app import create_app, db, ma  # noqa: F401
